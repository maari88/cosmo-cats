plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.cosmocats'
version = '0.0.1-SNAPSHOT'
description = 'marketplace'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    mapstructVersion = '1.5.5.Final'
    lombokVersion = '1.18.28'
    wiremockVersion = '3.0.0'
    lombokMapstructBindingVersion = '0.2.0'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // H2 & OpenAPI
    runtimeOnly 'com.h2database:h2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'


    // --- ТЕСТОВІ ЗАЛЕЖНОСТІ (ВИПРАВЛЕНО) ---

    // 1. Цей стартер ВЖЕ містить JUnit 5, Mockito та Hamcrest.
    // Більше нічого для Mockito/JUnit не потрібно.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 2. Додаємо WireMock (його немає у стартері)
    testImplementation "org.wiremock:wiremock:${wiremockVersion}"
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Amapstruct.defaultComponentModel=spring']
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("reports/jacoco/html")
    }
}


jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            excludes = [
                    'com/cosmocats/marketplace/external/PricingClient.java',
                    'com/cosmocats/marketplace/external/dto/ExternalPriceDTO.java'
            ]
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
